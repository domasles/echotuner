"""Spotify playlist creation service for EchoTuner."""

import asyncio
import aiohttp
import logging
from typing import List, Dict, Any, Optional, Tuple
from urllib.parse import urlencode

from core.models import Song
from config.settings import settings

logger = logging.getLogger(__name__)

class SpotifyPlaylistService:
    """Service for creating playlists in Spotify."""

    def __init__(self):
        self._initialized = False

    async def initialize(self):
        """Initialize the Spotify playlist service."""
        try:
            if not settings.SPOTIFY_CLIENT_ID or not settings.SPOTIFY_CLIENT_SECRET:
                logger.warning("Spotify credentials not configured - playlist creation disabled")
                return
                
            self._initialized = True
            logger.info("Spotify playlist service initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize Spotify playlist service: {e}")
            raise

    async def get_user_playlists(self, access_token: str) -> List[Dict[str, Any]]:
        """Get user's Spotify playlists."""
        try:
            async with aiohttp.ClientSession() as session:
                headers = {'Authorization': f'Bearer {access_token}'}
                
                url = 'https://api.spotify.com/v1/me/playlists'
                params = {'limit': 50}
                
                async with session.get(url, headers=headers, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get('items', [])
                    elif response.status == 401:
                        raise Exception("Invalid or expired access token")
                    else:
                        raise Exception(f"Failed to fetch playlists: {response.status}")
                        
        except Exception as e:
            logger.error(f"Failed to get user playlists: {e}")
            raise

    async def get_playlist_tracks(self, access_token: str, playlist_id: str) -> List[Dict[str, Any]]:
        """Get tracks from a specific Spotify playlist."""
        try:
            async with aiohttp.ClientSession() as session:
                headers = {'Authorization': f'Bearer {access_token}'}
                
                url = f'https://api.spotify.com/v1/playlists/{playlist_id}/tracks'
                params = {'limit': 100}
                
                tracks = []
                
                while url:
                    async with session.get(url, headers=headers, params=params) as response:
                        if response.status == 200:
                            data = await response.json()
                            tracks.extend(data.get('items', []))
                            url = data.get('next')
                            params = {}  # Clear params for subsequent requests
                        elif response.status == 401:
                            raise Exception("Invalid or expired access token")
                        else:
                            raise Exception(f"Failed to fetch playlist tracks: {response.status}")
                
                return tracks
                        
        except Exception as e:
            logger.error(f"Failed to get playlist tracks: {e}")
            raise

    async def create_playlist(self, access_token: str, name: str, songs: List[Song], 
                            description: Optional[str] = None, public: bool = False) -> Tuple[str, str]:
        """Create a new Spotify playlist with the given songs."""
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    'Authorization': f'Bearer {access_token}',
                    'Content-Type': 'application/json'
                }
                
                # First, get user ID
                user_id = await self._get_user_id(session, headers)
                
                # Create the playlist
                playlist_data = {
                    'name': name,
                    'description': description or 'Generated by EchoTuner AI',
                    'public': public
                }
                
                url = f'https://api.spotify.com/v1/users/{user_id}/playlists'
                
                async with session.post(url, headers=headers, json=playlist_data) as response:
                    if response.status == 201:
                        playlist_info = await response.json()
                        playlist_id = playlist_info['id']
                        playlist_url = playlist_info['external_urls']['spotify']
                    elif response.status == 401:
                        raise Exception("Invalid or expired access token")
                    else:
                        raise Exception(f"Failed to create playlist: {response.status}")
                
                # Add tracks to the playlist
                track_uris = []
                for song in songs:
                    if song.spotify_id:
                        track_uris.append(f'spotify:track:{song.spotify_id}')
                
                if track_uris:
                    await self._add_tracks_to_playlist(session, headers, playlist_id, track_uris)
                
                logger.info(f"Created Spotify playlist {playlist_id} with {len(track_uris)} tracks")
                return playlist_id, playlist_url
                
        except Exception as e:
            logger.error(f"Failed to create Spotify playlist: {e}")
            raise

    async def _get_user_id(self, session: aiohttp.ClientSession, headers: Dict[str, str]) -> str:
        """Get the current user's Spotify ID."""
        url = 'https://api.spotify.com/v1/me'
        
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                user_data = await response.json()
                return user_data['id']
            elif response.status == 401:
                raise Exception("Invalid or expired access token")
            else:
                raise Exception(f"Failed to get user ID: {response.status}")

    async def _add_tracks_to_playlist(self, session: aiohttp.ClientSession, headers: Dict[str, str], 
                                    playlist_id: str, track_uris: List[str]):
        """Add tracks to a Spotify playlist."""
        # Spotify API allows max 100 tracks per request
        batch_size = 100
        
        for i in range(0, len(track_uris), batch_size):
            batch = track_uris[i:i + batch_size]
            
            url = f'https://api.spotify.com/v1/playlists/{playlist_id}/tracks'
            data = {'uris': batch}
            
            async with session.post(url, headers=headers, json=data) as response:
                if response.status not in [200, 201]:
                    raise Exception(f"Failed to add tracks to playlist: {response.status}")
                    
            # Small delay between batches to avoid rate limiting
            if i + batch_size < len(track_uris):
                await asyncio.sleep(0.1)

    def is_ready(self) -> bool:
        """Check if the service is ready."""
        return self._initialized and settings.SPOTIFY_CLIENT_ID and settings.SPOTIFY_CLIENT_SECRET
